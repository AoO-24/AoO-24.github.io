<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Jiaangk Blog</title>
    <link>https://jiaangk.github.io/tags/linux/</link>
    <description>Recent content in Linux on Jiaangk Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Oct 2023 13:15:00 +0800</lastBuildDate><atom:link href="https://jiaangk.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux上LaTeX开发环境的安装（及Docker）</title>
      <link>https://jiaangk.github.io/posts/latex-with-docker/</link>
      <pubDate>Mon, 02 Oct 2023 13:15:00 +0800</pubDate>
      
      <guid>https://jiaangk.github.io/posts/latex-with-docker/</guid>
      <description>老系统烂掉了，现在又需要用$\LaTeX$写东西，Overleaf访问有时又不稳定，于是为了在本地开心愉快的编辑$\LaTeX$决定使用Docker容器的方法在本地安装一个Overleaf。
Docker安装 简单起见，我们使用Docker官网上提供的脚本方法来安装：
简单来说，我们只需要先通过
wget https://get.docker.com -O get-docker.sh 再通过
sudo sh get-docker.sh 即可安装Docker。在执行完以上命令后，运行apt list | grep docker命令（笔者使用的是Debian系统，因此默认的高级包管理器是apt，如果使用非Debian系系统需要使用其他命令），可以看到
Docker社区版本的软件包docker-ce以及其他附带软件已经在系统里安装。同时在/etc/apt/sources.list.d/目录内，观察到已经有docker.list文件，说明已经可以用apt包管理器来管理docker的更新。
Docker镜像 由于众所周知的原因，在国内如果直接访问Docker Hub来安装容器容易遇到速度慢、网络不稳等问题，因此需要添加国内镜像以加速：
供应商 网址 Docker Proxy https://dockerproxy.</description>
    </item>
    
    <item>
      <title>Linux系统目录备忘录</title>
      <link>https://jiaangk.github.io/posts/linux-filesystem/</link>
      <pubDate>Wed, 23 Aug 2023 16:00:00 +0800</pubDate>
      
      <guid>https://jiaangk.github.io/posts/linux-filesystem/</guid>
      <description>Linux的系统目录构成与作为计算机启蒙所熟知的Windows系统有很大不同，以下面的系统：
Linux version 6.1.0-11-amd64 (debian-kernel@lists.debian.org) (gcc-12 (Debian 12.2.0-14) 12.2.0, GNU ld (GNU Binutils for Debian) 2.40) #1 SMP PREEMPT_DYNAMIC Debian 6.1.38-4 (2023-08-08)
为例，针对其中的各个目录的功能制作一个备忘录方便查询。
boot是存放引导文件的目录，如开机时选择系统所使用的grub等，同时核心映像也存放于此，如上图的系统核心vmlinuz，以及引导程序initrd。
dev顾名思义即device，众所周知外部设备以文件的形式存在在Linux系统中，该目录下的文件提供了可以直接操控外部设备的接口。从本质上来说，dev目录被udev所管理，借由sysfs虚拟文件系统实现老版本中devfs的功能，提供用户空间控制设备的途径。</description>
    </item>
    
  </channel>
</rss>
